version: '3.1'

services:
  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongo:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
  emqx:
    image: emqx/emqx:5.10.0
    container_name: emqx
    restart: always
    ports:
      - 1883:1883   # MQTT TCP
      - 8083:8083   # MQTT WebSocket
      - 8084:8084   # MQTT WebSocket SSL
      - 8883:8883   # MQTT SSL
      - 18083:18083 # Dashboard
    environment:
      - EMQX_NODE_NAME=emqx@127.0.0.1
      - EMQX_DASHBOARD__DEFAULT_USERNAME=admin
      - EMQX_DASHBOARD__DEFAULT_PASSWORD=password
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx", "ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5
    volumes:
      - ./data/emqx/data:/opt/emqx/data
      - ./data/emqx/log:/opt/emqx/log
  state-manager:
    restart: always
    build: 
      context: .
      dockerfile: ./docker/backend/state-manager/Dockerfile
    ports:
      - 8080:8080
    environment:
      - MQTT_BROKER_ADDR=tcp://emqx:1883
      - MQTT_USERNAME=
      - MQTT_PASSWORD=
      - MQTT_CLIENT_ID=state-manager-client
      - MONGODB_URI=mongodb://root:password@mongo:27017/
      - APP_ENV=prod
    depends_on:
      - mongo
      - emqx
    healthcheck:
      test: curl --fail http://localhost:8080/debug/ping || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
  auto-operation:
    build: 
      context: .
      dockerfile: ./docker/backend/auto-operation/Dockerfile
    environment:
      - SERVER_ADDR=http://state-manager:8080
    depends_on:
      state-manager:
        condition: service_healthy
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/dashboard/Dockerfile.static
    ports:
      - 5173:80
    depends_on:
      - state-manager
  proxy:
    build: 
      context: .
      dockerfile: ./docker/backend/proxy/Dockerfile
    ports:
      - 3000:3031
    depends_on:
      - state-manager
      - auto-operation
      - frontend
    environment:
      - FRONTEND_URL=http://frontend
      - BACKEND_URL=http://state-manager:8080

volumes:
  dashboard_node_modules:
