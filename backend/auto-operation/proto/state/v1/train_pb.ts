//
//Train Proto
//駅に停車している列車の情報を扱うためのプロトコル

// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file state/v1/train.proto (package state.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum state.v1.Priority
 */
export enum Priority {
  /**
   * @generated from enum value: PRIORITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PRIORITY_LOW = 1;
   */
  LOW = 1,

  /**
   * @generated from enum value: PRIORITY_HIGH = 2;
   */
  HIGH = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Priority)
proto3.util.setEnumType(Priority, "state.v1.Priority", [
  { no: 0, name: "PRIORITY_UNSPECIFIED" },
  { no: 1, name: "PRIORITY_LOW" },
  { no: 2, name: "PRIORITY_HIGH" },
]);

/**
 * @generated from message state.v1.Train
 */
export class Train extends Message<Train> {
  /**
   * 列車ID(NFCのUUIDと一意に対応している)
   *
   * @generated from field: string train_id = 1;
   */
  trainId = "";

  /**
   * 駅 or 閉塞のID
   *
   * @generated from field: string position_id = 2;
   */
  positionId = "";

  /**
   * 列車の優先度
   *
   * @generated from field: state.v1.Priority priority = 3;
   */
  priority = Priority.UNSPECIFIED;

  /**
   * NFCのUUID
   *
   * @generated from field: string uuid = 4;
   */
  uuid = "";

  constructor(data?: PartialMessage<Train>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.Train";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "train_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "position_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "enum", T: proto3.getEnumType(Priority) },
    { no: 4, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Train {
    return new Train().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Train {
    return new Train().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Train {
    return new Train().fromJsonString(jsonString, options);
  }

  static equals(a: Train | PlainMessage<Train> | undefined, b: Train | PlainMessage<Train> | undefined): boolean {
    return proto3.util.equals(Train, a, b);
  }
}

/**
 *
 * GetTrains : 列車の状態を取得するAPI
 *
 * @generated from message state.v1.GetTrainsRequest
 */
export class GetTrainsRequest extends Message<GetTrainsRequest> {
  constructor(data?: PartialMessage<GetTrainsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.GetTrainsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrainsRequest {
    return new GetTrainsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrainsRequest {
    return new GetTrainsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrainsRequest {
    return new GetTrainsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrainsRequest | PlainMessage<GetTrainsRequest> | undefined, b: GetTrainsRequest | PlainMessage<GetTrainsRequest> | undefined): boolean {
    return proto3.util.equals(GetTrainsRequest, a, b);
  }
}

/**
 * @generated from message state.v1.GetTrainsResponse
 */
export class GetTrainsResponse extends Message<GetTrainsResponse> {
  /**
   * @generated from field: repeated state.v1.Train trains = 1;
   */
  trains: Train[] = [];

  constructor(data?: PartialMessage<GetTrainsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.GetTrainsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trains", kind: "message", T: Train, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrainsResponse {
    return new GetTrainsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrainsResponse {
    return new GetTrainsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrainsResponse {
    return new GetTrainsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrainsResponse | PlainMessage<GetTrainsResponse> | undefined, b: GetTrainsResponse | PlainMessage<GetTrainsResponse> | undefined): boolean {
    return proto3.util.equals(GetTrainsResponse, a, b);
  }
}

/**
 *
 * Add Train : 列車を追加するAPI
 *
 * @generated from message state.v1.AddTrainRequest
 */
export class AddTrainRequest extends Message<AddTrainRequest> {
  /**
   * @generated from field: state.v1.Train train = 1;
   */
  train?: Train;

  constructor(data?: PartialMessage<AddTrainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.AddTrainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "train", kind: "message", T: Train },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTrainRequest {
    return new AddTrainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTrainRequest {
    return new AddTrainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTrainRequest {
    return new AddTrainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddTrainRequest | PlainMessage<AddTrainRequest> | undefined, b: AddTrainRequest | PlainMessage<AddTrainRequest> | undefined): boolean {
    return proto3.util.equals(AddTrainRequest, a, b);
  }
}

/**
 * @generated from message state.v1.AddTrainResponse
 */
export class AddTrainResponse extends Message<AddTrainResponse> {
  /**
   * @generated from field: state.v1.Train train = 1;
   */
  train?: Train;

  constructor(data?: PartialMessage<AddTrainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.AddTrainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "train", kind: "message", T: Train },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTrainResponse {
    return new AddTrainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTrainResponse {
    return new AddTrainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTrainResponse {
    return new AddTrainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddTrainResponse | PlainMessage<AddTrainResponse> | undefined, b: AddTrainResponse | PlainMessage<AddTrainResponse> | undefined): boolean {
    return proto3.util.equals(AddTrainResponse, a, b);
  }
}

/**
 * @generated from message state.v1.UpdateTrainRequest
 */
export class UpdateTrainRequest extends Message<UpdateTrainRequest> {
  /**
   * @generated from field: state.v1.Train train = 1;
   */
  train?: Train;

  constructor(data?: PartialMessage<UpdateTrainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.UpdateTrainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "train", kind: "message", T: Train },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTrainRequest {
    return new UpdateTrainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTrainRequest {
    return new UpdateTrainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTrainRequest {
    return new UpdateTrainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTrainRequest | PlainMessage<UpdateTrainRequest> | undefined, b: UpdateTrainRequest | PlainMessage<UpdateTrainRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTrainRequest, a, b);
  }
}

/**
 * @generated from message state.v1.UpdateTrainResponse
 */
export class UpdateTrainResponse extends Message<UpdateTrainResponse> {
  /**
   * @generated from field: state.v1.Train train = 1;
   */
  train?: Train;

  constructor(data?: PartialMessage<UpdateTrainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.UpdateTrainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "train", kind: "message", T: Train },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTrainResponse {
    return new UpdateTrainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTrainResponse {
    return new UpdateTrainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTrainResponse {
    return new UpdateTrainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTrainResponse | PlainMessage<UpdateTrainResponse> | undefined, b: UpdateTrainResponse | PlainMessage<UpdateTrainResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTrainResponse, a, b);
  }
}

