// 仮想レイヤの状態

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/spec/v1/virtual_state.proto

package grpcconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	grpc "pkg/grpc"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StateManagerServiceName is the fully-qualified name of the StateManagerService service.
	StateManagerServiceName = "state_sync.v1.StateManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StateManagerServiceGetStateProcedure is the fully-qualified name of the StateManagerService's
	// GetState RPC.
	StateManagerServiceGetStateProcedure = "/state_sync.v1.StateManagerService/GetState"
)

// StateManagerServiceClient is a client for the state_sync.v1.StateManagerService service.
type StateManagerServiceClient interface {
	GetState(context.Context, *connect_go.Request[grpc.GetStateRequest]) (*connect_go.Response[grpc.GetStateResponse], error)
}

// NewStateManagerServiceClient constructs a client for the state_sync.v1.StateManagerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStateManagerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StateManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &stateManagerServiceClient{
		getState: connect_go.NewClient[grpc.GetStateRequest, grpc.GetStateResponse](
			httpClient,
			baseURL+StateManagerServiceGetStateProcedure,
			opts...,
		),
	}
}

// stateManagerServiceClient implements StateManagerServiceClient.
type stateManagerServiceClient struct {
	getState *connect_go.Client[grpc.GetStateRequest, grpc.GetStateResponse]
}

// GetState calls state_sync.v1.StateManagerService.GetState.
func (c *stateManagerServiceClient) GetState(ctx context.Context, req *connect_go.Request[grpc.GetStateRequest]) (*connect_go.Response[grpc.GetStateResponse], error) {
	return c.getState.CallUnary(ctx, req)
}

// StateManagerServiceHandler is an implementation of the state_sync.v1.StateManagerService service.
type StateManagerServiceHandler interface {
	GetState(context.Context, *connect_go.Request[grpc.GetStateRequest]) (*connect_go.Response[grpc.GetStateResponse], error)
}

// NewStateManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStateManagerServiceHandler(svc StateManagerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	stateManagerServiceGetStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceGetStateProcedure,
		svc.GetState,
		opts...,
	)
	return "/state_sync.v1.StateManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StateManagerServiceGetStateProcedure:
			stateManagerServiceGetStateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStateManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStateManagerServiceHandler struct{}

func (UnimplementedStateManagerServiceHandler) GetState(context.Context, *connect_go.Request[grpc.GetStateRequest]) (*connect_go.Response[grpc.GetStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state_sync.v1.StateManagerService.GetState is not implemented"))
}
