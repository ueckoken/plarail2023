// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/spec/v1/state.proto

package grpcconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	grpc "pkg/grpc"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StateManagerServiceName is the fully-qualified name of the StateManagerService service.
	StateManagerServiceName = "state_sync.v1.StateManagerService"
	// PointStateNotificationName is the fully-qualified name of the PointStateNotification service.
	PointStateNotificationName = "state_sync.v1.PointStateNotification"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StateManagerServiceUpdatePointStateProcedure is the fully-qualified name of the
	// StateManagerService's UpdatePointState RPC.
	StateManagerServiceUpdatePointStateProcedure = "/state_sync.v1.StateManagerService/UpdatePointState"
	// StateManagerServiceGetTrainStateProcedure is the fully-qualified name of the
	// StateManagerService's GetTrainState RPC.
	StateManagerServiceGetTrainStateProcedure = "/state_sync.v1.StateManagerService/GetTrainState"
	// StateManagerServiceGetBlockStateProcedure is the fully-qualified name of the
	// StateManagerService's GetBlockState RPC.
	StateManagerServiceGetBlockStateProcedure = "/state_sync.v1.StateManagerService/GetBlockState"
	// StateManagerServiceUpdateTrainStateProcedure is the fully-qualified name of the
	// StateManagerService's UpdateTrainState RPC.
	StateManagerServiceUpdateTrainStateProcedure = "/state_sync.v1.StateManagerService/UpdateTrainState"
	// StateManagerServiceUpdateBlockStateProcedure is the fully-qualified name of the
	// StateManagerService's UpdateBlockState RPC.
	StateManagerServiceUpdateBlockStateProcedure = "/state_sync.v1.StateManagerService/UpdateBlockState"
	// PointStateNotificationNotifyPointStateProcedure is the fully-qualified name of the
	// PointStateNotification's NotifyPointState RPC.
	PointStateNotificationNotifyPointStateProcedure = "/state_sync.v1.PointStateNotification/NotifyPointState"
)

// StateManagerServiceClient is a client for the state_sync.v1.StateManagerService service.
type StateManagerServiceClient interface {
	UpdatePointState(context.Context, *connect_go.Request[grpc.UpdatePointStateRequest]) (*connect_go.Response[grpc.UpdatePointStateResponse], error)
	GetTrainState(context.Context, *connect_go.Request[grpc.GetTrainStateRequest]) (*connect_go.Response[grpc.GetTrainStateResponse], error)
	GetBlockState(context.Context, *connect_go.Request[grpc.GetBlockStateRequest]) (*connect_go.Response[grpc.GetBlockStateResponse], error)
	UpdateTrainState(context.Context, *connect_go.Request[grpc.UpdateTrainStateRequest]) (*connect_go.Response[grpc.UpdateTrainStateResponse], error)
	UpdateBlockState(context.Context, *connect_go.Request[grpc.UpdateBlockStateRequest]) (*connect_go.Response[grpc.UpdateBlockStateResponse], error)
}

// NewStateManagerServiceClient constructs a client for the state_sync.v1.StateManagerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStateManagerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StateManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &stateManagerServiceClient{
		updatePointState: connect_go.NewClient[grpc.UpdatePointStateRequest, grpc.UpdatePointStateResponse](
			httpClient,
			baseURL+StateManagerServiceUpdatePointStateProcedure,
			opts...,
		),
		getTrainState: connect_go.NewClient[grpc.GetTrainStateRequest, grpc.GetTrainStateResponse](
			httpClient,
			baseURL+StateManagerServiceGetTrainStateProcedure,
			opts...,
		),
		getBlockState: connect_go.NewClient[grpc.GetBlockStateRequest, grpc.GetBlockStateResponse](
			httpClient,
			baseURL+StateManagerServiceGetBlockStateProcedure,
			opts...,
		),
		updateTrainState: connect_go.NewClient[grpc.UpdateTrainStateRequest, grpc.UpdateTrainStateResponse](
			httpClient,
			baseURL+StateManagerServiceUpdateTrainStateProcedure,
			opts...,
		),
		updateBlockState: connect_go.NewClient[grpc.UpdateBlockStateRequest, grpc.UpdateBlockStateResponse](
			httpClient,
			baseURL+StateManagerServiceUpdateBlockStateProcedure,
			opts...,
		),
	}
}

// stateManagerServiceClient implements StateManagerServiceClient.
type stateManagerServiceClient struct {
	updatePointState *connect_go.Client[grpc.UpdatePointStateRequest, grpc.UpdatePointStateResponse]
	getTrainState    *connect_go.Client[grpc.GetTrainStateRequest, grpc.GetTrainStateResponse]
	getBlockState    *connect_go.Client[grpc.GetBlockStateRequest, grpc.GetBlockStateResponse]
	updateTrainState *connect_go.Client[grpc.UpdateTrainStateRequest, grpc.UpdateTrainStateResponse]
	updateBlockState *connect_go.Client[grpc.UpdateBlockStateRequest, grpc.UpdateBlockStateResponse]
}

// UpdatePointState calls state_sync.v1.StateManagerService.UpdatePointState.
func (c *stateManagerServiceClient) UpdatePointState(ctx context.Context, req *connect_go.Request[grpc.UpdatePointStateRequest]) (*connect_go.Response[grpc.UpdatePointStateResponse], error) {
	return c.updatePointState.CallUnary(ctx, req)
}

// GetTrainState calls state_sync.v1.StateManagerService.GetTrainState.
func (c *stateManagerServiceClient) GetTrainState(ctx context.Context, req *connect_go.Request[grpc.GetTrainStateRequest]) (*connect_go.Response[grpc.GetTrainStateResponse], error) {
	return c.getTrainState.CallUnary(ctx, req)
}

// GetBlockState calls state_sync.v1.StateManagerService.GetBlockState.
func (c *stateManagerServiceClient) GetBlockState(ctx context.Context, req *connect_go.Request[grpc.GetBlockStateRequest]) (*connect_go.Response[grpc.GetBlockStateResponse], error) {
	return c.getBlockState.CallUnary(ctx, req)
}

// UpdateTrainState calls state_sync.v1.StateManagerService.UpdateTrainState.
func (c *stateManagerServiceClient) UpdateTrainState(ctx context.Context, req *connect_go.Request[grpc.UpdateTrainStateRequest]) (*connect_go.Response[grpc.UpdateTrainStateResponse], error) {
	return c.updateTrainState.CallUnary(ctx, req)
}

// UpdateBlockState calls state_sync.v1.StateManagerService.UpdateBlockState.
func (c *stateManagerServiceClient) UpdateBlockState(ctx context.Context, req *connect_go.Request[grpc.UpdateBlockStateRequest]) (*connect_go.Response[grpc.UpdateBlockStateResponse], error) {
	return c.updateBlockState.CallUnary(ctx, req)
}

// StateManagerServiceHandler is an implementation of the state_sync.v1.StateManagerService service.
type StateManagerServiceHandler interface {
	UpdatePointState(context.Context, *connect_go.Request[grpc.UpdatePointStateRequest]) (*connect_go.Response[grpc.UpdatePointStateResponse], error)
	GetTrainState(context.Context, *connect_go.Request[grpc.GetTrainStateRequest]) (*connect_go.Response[grpc.GetTrainStateResponse], error)
	GetBlockState(context.Context, *connect_go.Request[grpc.GetBlockStateRequest]) (*connect_go.Response[grpc.GetBlockStateResponse], error)
	UpdateTrainState(context.Context, *connect_go.Request[grpc.UpdateTrainStateRequest]) (*connect_go.Response[grpc.UpdateTrainStateResponse], error)
	UpdateBlockState(context.Context, *connect_go.Request[grpc.UpdateBlockStateRequest]) (*connect_go.Response[grpc.UpdateBlockStateResponse], error)
}

// NewStateManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStateManagerServiceHandler(svc StateManagerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	stateManagerServiceUpdatePointStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceUpdatePointStateProcedure,
		svc.UpdatePointState,
		opts...,
	)
	stateManagerServiceGetTrainStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceGetTrainStateProcedure,
		svc.GetTrainState,
		opts...,
	)
	stateManagerServiceGetBlockStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceGetBlockStateProcedure,
		svc.GetBlockState,
		opts...,
	)
	stateManagerServiceUpdateTrainStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceUpdateTrainStateProcedure,
		svc.UpdateTrainState,
		opts...,
	)
	stateManagerServiceUpdateBlockStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceUpdateBlockStateProcedure,
		svc.UpdateBlockState,
		opts...,
	)
	return "/state_sync.v1.StateManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StateManagerServiceUpdatePointStateProcedure:
			stateManagerServiceUpdatePointStateHandler.ServeHTTP(w, r)
		case StateManagerServiceGetTrainStateProcedure:
			stateManagerServiceGetTrainStateHandler.ServeHTTP(w, r)
		case StateManagerServiceGetBlockStateProcedure:
			stateManagerServiceGetBlockStateHandler.ServeHTTP(w, r)
		case StateManagerServiceUpdateTrainStateProcedure:
			stateManagerServiceUpdateTrainStateHandler.ServeHTTP(w, r)
		case StateManagerServiceUpdateBlockStateProcedure:
			stateManagerServiceUpdateBlockStateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStateManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStateManagerServiceHandler struct{}

func (UnimplementedStateManagerServiceHandler) UpdatePointState(context.Context, *connect_go.Request[grpc.UpdatePointStateRequest]) (*connect_go.Response[grpc.UpdatePointStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state_sync.v1.StateManagerService.UpdatePointState is not implemented"))
}

func (UnimplementedStateManagerServiceHandler) GetTrainState(context.Context, *connect_go.Request[grpc.GetTrainStateRequest]) (*connect_go.Response[grpc.GetTrainStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state_sync.v1.StateManagerService.GetTrainState is not implemented"))
}

func (UnimplementedStateManagerServiceHandler) GetBlockState(context.Context, *connect_go.Request[grpc.GetBlockStateRequest]) (*connect_go.Response[grpc.GetBlockStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state_sync.v1.StateManagerService.GetBlockState is not implemented"))
}

func (UnimplementedStateManagerServiceHandler) UpdateTrainState(context.Context, *connect_go.Request[grpc.UpdateTrainStateRequest]) (*connect_go.Response[grpc.UpdateTrainStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state_sync.v1.StateManagerService.UpdateTrainState is not implemented"))
}

func (UnimplementedStateManagerServiceHandler) UpdateBlockState(context.Context, *connect_go.Request[grpc.UpdateBlockStateRequest]) (*connect_go.Response[grpc.UpdateBlockStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state_sync.v1.StateManagerService.UpdateBlockState is not implemented"))
}

// PointStateNotificationClient is a client for the state_sync.v1.PointStateNotification service.
type PointStateNotificationClient interface {
	// NotifyPointStateはStateManagerからMQTT Brokerに対して状態の通知を伝える
	NotifyPointState(context.Context, *connect_go.Request[grpc.NotifyPointStateRequest]) (*connect_go.Response[grpc.NotifyPointStateResponse], error)
}

// NewPointStateNotificationClient constructs a client for the state_sync.v1.PointStateNotification
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPointStateNotificationClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PointStateNotificationClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pointStateNotificationClient{
		notifyPointState: connect_go.NewClient[grpc.NotifyPointStateRequest, grpc.NotifyPointStateResponse](
			httpClient,
			baseURL+PointStateNotificationNotifyPointStateProcedure,
			opts...,
		),
	}
}

// pointStateNotificationClient implements PointStateNotificationClient.
type pointStateNotificationClient struct {
	notifyPointState *connect_go.Client[grpc.NotifyPointStateRequest, grpc.NotifyPointStateResponse]
}

// NotifyPointState calls state_sync.v1.PointStateNotification.NotifyPointState.
func (c *pointStateNotificationClient) NotifyPointState(ctx context.Context, req *connect_go.Request[grpc.NotifyPointStateRequest]) (*connect_go.Response[grpc.NotifyPointStateResponse], error) {
	return c.notifyPointState.CallUnary(ctx, req)
}

// PointStateNotificationHandler is an implementation of the state_sync.v1.PointStateNotification
// service.
type PointStateNotificationHandler interface {
	// NotifyPointStateはStateManagerからMQTT Brokerに対して状態の通知を伝える
	NotifyPointState(context.Context, *connect_go.Request[grpc.NotifyPointStateRequest]) (*connect_go.Response[grpc.NotifyPointStateResponse], error)
}

// NewPointStateNotificationHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPointStateNotificationHandler(svc PointStateNotificationHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	pointStateNotificationNotifyPointStateHandler := connect_go.NewUnaryHandler(
		PointStateNotificationNotifyPointStateProcedure,
		svc.NotifyPointState,
		opts...,
	)
	return "/state_sync.v1.PointStateNotification/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PointStateNotificationNotifyPointStateProcedure:
			pointStateNotificationNotifyPointStateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPointStateNotificationHandler returns CodeUnimplemented from all methods.
type UnimplementedPointStateNotificationHandler struct{}

func (UnimplementedPointStateNotificationHandler) NotifyPointState(context.Context, *connect_go.Request[grpc.NotifyPointStateRequest]) (*connect_go.Response[grpc.NotifyPointStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state_sync.v1.PointStateNotification.NotifyPointState is not implemented"))
}
