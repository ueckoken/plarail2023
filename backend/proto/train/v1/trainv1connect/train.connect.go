//
//Train Proto
//駅に停車している列車の情報を扱うためのプロトコル

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/train/v1/train.proto

package trainv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ueckoken/plarail2023/backend/proto/train/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TrainServiceName is the fully-qualified name of the TrainService service.
	TrainServiceName = "train.v1.TrainService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TrainServiceNotifyTrainArrivalProcedure is the fully-qualified name of the TrainService's
	// NotifyTrainArrival RPC.
	TrainServiceNotifyTrainArrivalProcedure = "/train.v1.TrainService/NotifyTrainArrival"
)

// TrainServiceClient is a client for the train.v1.TrainService service.
type TrainServiceClient interface {
	NotifyTrainArrival(context.Context, *connect_go.Request[v1.NotifyTrainArrivalRequest]) (*connect_go.Response[v1.NotifyTrainArrivalResponse], error)
}

// NewTrainServiceClient constructs a client for the train.v1.TrainService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTrainServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TrainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &trainServiceClient{
		notifyTrainArrival: connect_go.NewClient[v1.NotifyTrainArrivalRequest, v1.NotifyTrainArrivalResponse](
			httpClient,
			baseURL+TrainServiceNotifyTrainArrivalProcedure,
			opts...,
		),
	}
}

// trainServiceClient implements TrainServiceClient.
type trainServiceClient struct {
	notifyTrainArrival *connect_go.Client[v1.NotifyTrainArrivalRequest, v1.NotifyTrainArrivalResponse]
}

// NotifyTrainArrival calls train.v1.TrainService.NotifyTrainArrival.
func (c *trainServiceClient) NotifyTrainArrival(ctx context.Context, req *connect_go.Request[v1.NotifyTrainArrivalRequest]) (*connect_go.Response[v1.NotifyTrainArrivalResponse], error) {
	return c.notifyTrainArrival.CallUnary(ctx, req)
}

// TrainServiceHandler is an implementation of the train.v1.TrainService service.
type TrainServiceHandler interface {
	NotifyTrainArrival(context.Context, *connect_go.Request[v1.NotifyTrainArrivalRequest]) (*connect_go.Response[v1.NotifyTrainArrivalResponse], error)
}

// NewTrainServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTrainServiceHandler(svc TrainServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	trainServiceNotifyTrainArrivalHandler := connect_go.NewUnaryHandler(
		TrainServiceNotifyTrainArrivalProcedure,
		svc.NotifyTrainArrival,
		opts...,
	)
	return "/train.v1.TrainService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TrainServiceNotifyTrainArrivalProcedure:
			trainServiceNotifyTrainArrivalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTrainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTrainServiceHandler struct{}

func (UnimplementedTrainServiceHandler) NotifyTrainArrival(context.Context, *connect_go.Request[v1.NotifyTrainArrivalRequest]) (*connect_go.Response[v1.NotifyTrainArrivalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("train.v1.TrainService.NotifyTrainArrival is not implemented"))
}
