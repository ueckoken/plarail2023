// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: spec/state/v1/state.proto

package statev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ueckoken/plarail2023/backend/spec/state/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StateManagerServiceName is the fully-qualified name of the StateManagerService service.
	StateManagerServiceName = "state.v1.StateManagerService"
	// PointStateNotificationName is the fully-qualified name of the PointStateNotification service.
	PointStateNotificationName = "state.v1.PointStateNotification"
	// UpdateStateNotificationName is the fully-qualified name of the UpdateStateNotification service.
	UpdateStateNotificationName = "state.v1.UpdateStateNotification"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StateManagerServiceUpdatePointStateProcedure is the fully-qualified name of the
	// StateManagerService's UpdatePointState RPC.
	StateManagerServiceUpdatePointStateProcedure = "/state.v1.StateManagerService/UpdatePointState"
	// StateManagerServiceGetTrainStateProcedure is the fully-qualified name of the
	// StateManagerService's GetTrainState RPC.
	StateManagerServiceGetTrainStateProcedure = "/state.v1.StateManagerService/GetTrainState"
	// StateManagerServiceGetNodeStateProcedure is the fully-qualified name of the StateManagerService's
	// GetNodeState RPC.
	StateManagerServiceGetNodeStateProcedure = "/state.v1.StateManagerService/GetNodeState"
	// StateManagerServiceGetBlockStateProcedure is the fully-qualified name of the
	// StateManagerService's GetBlockState RPC.
	StateManagerServiceGetBlockStateProcedure = "/state.v1.StateManagerService/GetBlockState"
	// StateManagerServiceUpdateTrainStateProcedure is the fully-qualified name of the
	// StateManagerService's UpdateTrainState RPC.
	StateManagerServiceUpdateTrainStateProcedure = "/state.v1.StateManagerService/UpdateTrainState"
	// StateManagerServiceUpdateBlockStateProcedure is the fully-qualified name of the
	// StateManagerService's UpdateBlockState RPC.
	StateManagerServiceUpdateBlockStateProcedure = "/state.v1.StateManagerService/UpdateBlockState"
	// StateManagerServiceUpdateNodeStateProcedure is the fully-qualified name of the
	// StateManagerService's UpdateNodeState RPC.
	StateManagerServiceUpdateNodeStateProcedure = "/state.v1.StateManagerService/UpdateNodeState"
	// PointStateNotificationNotifyPointStateProcedure is the fully-qualified name of the
	// PointStateNotification's NotifyPointState RPC.
	PointStateNotificationNotifyPointStateProcedure = "/state.v1.PointStateNotification/NotifyPointState"
	// UpdateStateNotificationUpdateStateProcedure is the fully-qualified name of the
	// UpdateStateNotification's UpdateState RPC.
	UpdateStateNotificationUpdateStateProcedure = "/state.v1.UpdateStateNotification/UpdateState"
)

// StateManagerServiceClient is a client for the state.v1.StateManagerService service.
type StateManagerServiceClient interface {
	UpdatePointState(context.Context, *connect_go.Request[v1.UpdatePointStateRequest]) (*connect_go.Response[v1.UpdatePointStateResponse], error)
	GetTrainState(context.Context, *connect_go.Request[v1.GetTrainStateRequest]) (*connect_go.Response[v1.GetTrainStateResponse], error)
	GetNodeState(context.Context, *connect_go.Request[v1.GetNodeStateRequest]) (*connect_go.Response[v1.GetNodeStateResponse], error)
	GetBlockState(context.Context, *connect_go.Request[v1.GetBlockStateRequest]) (*connect_go.Response[v1.GetBlockStateResponse], error)
	UpdateTrainState(context.Context, *connect_go.Request[v1.UpdateTrainStateRequest]) (*connect_go.Response[v1.UpdateTrainStateResponse], error)
	UpdateBlockState(context.Context, *connect_go.Request[v1.UpdateBlockStateRequest]) (*connect_go.Response[v1.UpdateBlockStateResponse], error)
	UpdateNodeState(context.Context, *connect_go.Request[v1.UpdateNodeStateRequest]) (*connect_go.Response[v1.UpdateNodeStateResponse], error)
}

// NewStateManagerServiceClient constructs a client for the state.v1.StateManagerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStateManagerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StateManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &stateManagerServiceClient{
		updatePointState: connect_go.NewClient[v1.UpdatePointStateRequest, v1.UpdatePointStateResponse](
			httpClient,
			baseURL+StateManagerServiceUpdatePointStateProcedure,
			opts...,
		),
		getTrainState: connect_go.NewClient[v1.GetTrainStateRequest, v1.GetTrainStateResponse](
			httpClient,
			baseURL+StateManagerServiceGetTrainStateProcedure,
			opts...,
		),
		getNodeState: connect_go.NewClient[v1.GetNodeStateRequest, v1.GetNodeStateResponse](
			httpClient,
			baseURL+StateManagerServiceGetNodeStateProcedure,
			opts...,
		),
		getBlockState: connect_go.NewClient[v1.GetBlockStateRequest, v1.GetBlockStateResponse](
			httpClient,
			baseURL+StateManagerServiceGetBlockStateProcedure,
			opts...,
		),
		updateTrainState: connect_go.NewClient[v1.UpdateTrainStateRequest, v1.UpdateTrainStateResponse](
			httpClient,
			baseURL+StateManagerServiceUpdateTrainStateProcedure,
			opts...,
		),
		updateBlockState: connect_go.NewClient[v1.UpdateBlockStateRequest, v1.UpdateBlockStateResponse](
			httpClient,
			baseURL+StateManagerServiceUpdateBlockStateProcedure,
			opts...,
		),
		updateNodeState: connect_go.NewClient[v1.UpdateNodeStateRequest, v1.UpdateNodeStateResponse](
			httpClient,
			baseURL+StateManagerServiceUpdateNodeStateProcedure,
			opts...,
		),
	}
}

// stateManagerServiceClient implements StateManagerServiceClient.
type stateManagerServiceClient struct {
	updatePointState *connect_go.Client[v1.UpdatePointStateRequest, v1.UpdatePointStateResponse]
	getTrainState    *connect_go.Client[v1.GetTrainStateRequest, v1.GetTrainStateResponse]
	getNodeState     *connect_go.Client[v1.GetNodeStateRequest, v1.GetNodeStateResponse]
	getBlockState    *connect_go.Client[v1.GetBlockStateRequest, v1.GetBlockStateResponse]
	updateTrainState *connect_go.Client[v1.UpdateTrainStateRequest, v1.UpdateTrainStateResponse]
	updateBlockState *connect_go.Client[v1.UpdateBlockStateRequest, v1.UpdateBlockStateResponse]
	updateNodeState  *connect_go.Client[v1.UpdateNodeStateRequest, v1.UpdateNodeStateResponse]
}

// UpdatePointState calls state.v1.StateManagerService.UpdatePointState.
func (c *stateManagerServiceClient) UpdatePointState(ctx context.Context, req *connect_go.Request[v1.UpdatePointStateRequest]) (*connect_go.Response[v1.UpdatePointStateResponse], error) {
	return c.updatePointState.CallUnary(ctx, req)
}

// GetTrainState calls state.v1.StateManagerService.GetTrainState.
func (c *stateManagerServiceClient) GetTrainState(ctx context.Context, req *connect_go.Request[v1.GetTrainStateRequest]) (*connect_go.Response[v1.GetTrainStateResponse], error) {
	return c.getTrainState.CallUnary(ctx, req)
}

// GetNodeState calls state.v1.StateManagerService.GetNodeState.
func (c *stateManagerServiceClient) GetNodeState(ctx context.Context, req *connect_go.Request[v1.GetNodeStateRequest]) (*connect_go.Response[v1.GetNodeStateResponse], error) {
	return c.getNodeState.CallUnary(ctx, req)
}

// GetBlockState calls state.v1.StateManagerService.GetBlockState.
func (c *stateManagerServiceClient) GetBlockState(ctx context.Context, req *connect_go.Request[v1.GetBlockStateRequest]) (*connect_go.Response[v1.GetBlockStateResponse], error) {
	return c.getBlockState.CallUnary(ctx, req)
}

// UpdateTrainState calls state.v1.StateManagerService.UpdateTrainState.
func (c *stateManagerServiceClient) UpdateTrainState(ctx context.Context, req *connect_go.Request[v1.UpdateTrainStateRequest]) (*connect_go.Response[v1.UpdateTrainStateResponse], error) {
	return c.updateTrainState.CallUnary(ctx, req)
}

// UpdateBlockState calls state.v1.StateManagerService.UpdateBlockState.
func (c *stateManagerServiceClient) UpdateBlockState(ctx context.Context, req *connect_go.Request[v1.UpdateBlockStateRequest]) (*connect_go.Response[v1.UpdateBlockStateResponse], error) {
	return c.updateBlockState.CallUnary(ctx, req)
}

// UpdateNodeState calls state.v1.StateManagerService.UpdateNodeState.
func (c *stateManagerServiceClient) UpdateNodeState(ctx context.Context, req *connect_go.Request[v1.UpdateNodeStateRequest]) (*connect_go.Response[v1.UpdateNodeStateResponse], error) {
	return c.updateNodeState.CallUnary(ctx, req)
}

// StateManagerServiceHandler is an implementation of the state.v1.StateManagerService service.
type StateManagerServiceHandler interface {
	UpdatePointState(context.Context, *connect_go.Request[v1.UpdatePointStateRequest]) (*connect_go.Response[v1.UpdatePointStateResponse], error)
	GetTrainState(context.Context, *connect_go.Request[v1.GetTrainStateRequest]) (*connect_go.Response[v1.GetTrainStateResponse], error)
	GetNodeState(context.Context, *connect_go.Request[v1.GetNodeStateRequest]) (*connect_go.Response[v1.GetNodeStateResponse], error)
	GetBlockState(context.Context, *connect_go.Request[v1.GetBlockStateRequest]) (*connect_go.Response[v1.GetBlockStateResponse], error)
	UpdateTrainState(context.Context, *connect_go.Request[v1.UpdateTrainStateRequest]) (*connect_go.Response[v1.UpdateTrainStateResponse], error)
	UpdateBlockState(context.Context, *connect_go.Request[v1.UpdateBlockStateRequest]) (*connect_go.Response[v1.UpdateBlockStateResponse], error)
	UpdateNodeState(context.Context, *connect_go.Request[v1.UpdateNodeStateRequest]) (*connect_go.Response[v1.UpdateNodeStateResponse], error)
}

// NewStateManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStateManagerServiceHandler(svc StateManagerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	stateManagerServiceUpdatePointStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceUpdatePointStateProcedure,
		svc.UpdatePointState,
		opts...,
	)
	stateManagerServiceGetTrainStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceGetTrainStateProcedure,
		svc.GetTrainState,
		opts...,
	)
	stateManagerServiceGetNodeStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceGetNodeStateProcedure,
		svc.GetNodeState,
		opts...,
	)
	stateManagerServiceGetBlockStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceGetBlockStateProcedure,
		svc.GetBlockState,
		opts...,
	)
	stateManagerServiceUpdateTrainStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceUpdateTrainStateProcedure,
		svc.UpdateTrainState,
		opts...,
	)
	stateManagerServiceUpdateBlockStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceUpdateBlockStateProcedure,
		svc.UpdateBlockState,
		opts...,
	)
	stateManagerServiceUpdateNodeStateHandler := connect_go.NewUnaryHandler(
		StateManagerServiceUpdateNodeStateProcedure,
		svc.UpdateNodeState,
		opts...,
	)
	return "/state.v1.StateManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StateManagerServiceUpdatePointStateProcedure:
			stateManagerServiceUpdatePointStateHandler.ServeHTTP(w, r)
		case StateManagerServiceGetTrainStateProcedure:
			stateManagerServiceGetTrainStateHandler.ServeHTTP(w, r)
		case StateManagerServiceGetNodeStateProcedure:
			stateManagerServiceGetNodeStateHandler.ServeHTTP(w, r)
		case StateManagerServiceGetBlockStateProcedure:
			stateManagerServiceGetBlockStateHandler.ServeHTTP(w, r)
		case StateManagerServiceUpdateTrainStateProcedure:
			stateManagerServiceUpdateTrainStateHandler.ServeHTTP(w, r)
		case StateManagerServiceUpdateBlockStateProcedure:
			stateManagerServiceUpdateBlockStateHandler.ServeHTTP(w, r)
		case StateManagerServiceUpdateNodeStateProcedure:
			stateManagerServiceUpdateNodeStateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStateManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStateManagerServiceHandler struct{}

func (UnimplementedStateManagerServiceHandler) UpdatePointState(context.Context, *connect_go.Request[v1.UpdatePointStateRequest]) (*connect_go.Response[v1.UpdatePointStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state.v1.StateManagerService.UpdatePointState is not implemented"))
}

func (UnimplementedStateManagerServiceHandler) GetTrainState(context.Context, *connect_go.Request[v1.GetTrainStateRequest]) (*connect_go.Response[v1.GetTrainStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state.v1.StateManagerService.GetTrainState is not implemented"))
}

func (UnimplementedStateManagerServiceHandler) GetNodeState(context.Context, *connect_go.Request[v1.GetNodeStateRequest]) (*connect_go.Response[v1.GetNodeStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state.v1.StateManagerService.GetNodeState is not implemented"))
}

func (UnimplementedStateManagerServiceHandler) GetBlockState(context.Context, *connect_go.Request[v1.GetBlockStateRequest]) (*connect_go.Response[v1.GetBlockStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state.v1.StateManagerService.GetBlockState is not implemented"))
}

func (UnimplementedStateManagerServiceHandler) UpdateTrainState(context.Context, *connect_go.Request[v1.UpdateTrainStateRequest]) (*connect_go.Response[v1.UpdateTrainStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state.v1.StateManagerService.UpdateTrainState is not implemented"))
}

func (UnimplementedStateManagerServiceHandler) UpdateBlockState(context.Context, *connect_go.Request[v1.UpdateBlockStateRequest]) (*connect_go.Response[v1.UpdateBlockStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state.v1.StateManagerService.UpdateBlockState is not implemented"))
}

func (UnimplementedStateManagerServiceHandler) UpdateNodeState(context.Context, *connect_go.Request[v1.UpdateNodeStateRequest]) (*connect_go.Response[v1.UpdateNodeStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state.v1.StateManagerService.UpdateNodeState is not implemented"))
}

// PointStateNotificationClient is a client for the state.v1.PointStateNotification service.
type PointStateNotificationClient interface {
	// NotifyPointStateはStateManagerからMQTT Brokerに対して状態の通知を伝える
	NotifyPointState(context.Context, *connect_go.Request[v1.NotifyPointStateRequest]) (*connect_go.Response[v1.NotifyPointStateResponse], error)
}

// NewPointStateNotificationClient constructs a client for the state.v1.PointStateNotification
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPointStateNotificationClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PointStateNotificationClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pointStateNotificationClient{
		notifyPointState: connect_go.NewClient[v1.NotifyPointStateRequest, v1.NotifyPointStateResponse](
			httpClient,
			baseURL+PointStateNotificationNotifyPointStateProcedure,
			opts...,
		),
	}
}

// pointStateNotificationClient implements PointStateNotificationClient.
type pointStateNotificationClient struct {
	notifyPointState *connect_go.Client[v1.NotifyPointStateRequest, v1.NotifyPointStateResponse]
}

// NotifyPointState calls state.v1.PointStateNotification.NotifyPointState.
func (c *pointStateNotificationClient) NotifyPointState(ctx context.Context, req *connect_go.Request[v1.NotifyPointStateRequest]) (*connect_go.Response[v1.NotifyPointStateResponse], error) {
	return c.notifyPointState.CallUnary(ctx, req)
}

// PointStateNotificationHandler is an implementation of the state.v1.PointStateNotification
// service.
type PointStateNotificationHandler interface {
	// NotifyPointStateはStateManagerからMQTT Brokerに対して状態の通知を伝える
	NotifyPointState(context.Context, *connect_go.Request[v1.NotifyPointStateRequest]) (*connect_go.Response[v1.NotifyPointStateResponse], error)
}

// NewPointStateNotificationHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPointStateNotificationHandler(svc PointStateNotificationHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	pointStateNotificationNotifyPointStateHandler := connect_go.NewUnaryHandler(
		PointStateNotificationNotifyPointStateProcedure,
		svc.NotifyPointState,
		opts...,
	)
	return "/state.v1.PointStateNotification/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PointStateNotificationNotifyPointStateProcedure:
			pointStateNotificationNotifyPointStateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPointStateNotificationHandler returns CodeUnimplemented from all methods.
type UnimplementedPointStateNotificationHandler struct{}

func (UnimplementedPointStateNotificationHandler) NotifyPointState(context.Context, *connect_go.Request[v1.NotifyPointStateRequest]) (*connect_go.Response[v1.NotifyPointStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state.v1.PointStateNotification.NotifyPointState is not implemented"))
}

// UpdateStateNotificationClient is a client for the state.v1.UpdateStateNotification service.
type UpdateStateNotificationClient interface {
	// 状態の更新をTrainControllerに通知する
	UpdateState(context.Context, *connect_go.Request[v1.UpdateStateRequest]) (*connect_go.Response[v1.UpdateStateResponse], error)
}

// NewUpdateStateNotificationClient constructs a client for the state.v1.UpdateStateNotification
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUpdateStateNotificationClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UpdateStateNotificationClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &updateStateNotificationClient{
		updateState: connect_go.NewClient[v1.UpdateStateRequest, v1.UpdateStateResponse](
			httpClient,
			baseURL+UpdateStateNotificationUpdateStateProcedure,
			opts...,
		),
	}
}

// updateStateNotificationClient implements UpdateStateNotificationClient.
type updateStateNotificationClient struct {
	updateState *connect_go.Client[v1.UpdateStateRequest, v1.UpdateStateResponse]
}

// UpdateState calls state.v1.UpdateStateNotification.UpdateState.
func (c *updateStateNotificationClient) UpdateState(ctx context.Context, req *connect_go.Request[v1.UpdateStateRequest]) (*connect_go.Response[v1.UpdateStateResponse], error) {
	return c.updateState.CallUnary(ctx, req)
}

// UpdateStateNotificationHandler is an implementation of the state.v1.UpdateStateNotification
// service.
type UpdateStateNotificationHandler interface {
	// 状態の更新をTrainControllerに通知する
	UpdateState(context.Context, *connect_go.Request[v1.UpdateStateRequest]) (*connect_go.Response[v1.UpdateStateResponse], error)
}

// NewUpdateStateNotificationHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUpdateStateNotificationHandler(svc UpdateStateNotificationHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	updateStateNotificationUpdateStateHandler := connect_go.NewUnaryHandler(
		UpdateStateNotificationUpdateStateProcedure,
		svc.UpdateState,
		opts...,
	)
	return "/state.v1.UpdateStateNotification/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UpdateStateNotificationUpdateStateProcedure:
			updateStateNotificationUpdateStateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUpdateStateNotificationHandler returns CodeUnimplemented from all methods.
type UnimplementedUpdateStateNotificationHandler struct{}

func (UnimplementedUpdateStateNotificationHandler) UpdateState(context.Context, *connect_go.Request[v1.UpdateStateRequest]) (*connect_go.Response[v1.UpdateStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("state.v1.UpdateStateNotification.UpdateState is not implemented"))
}
