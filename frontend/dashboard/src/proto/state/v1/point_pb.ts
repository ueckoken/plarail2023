//
//Point Proto
//ポイントレールの状態を扱うプロトコル

// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file state/v1/point.proto (package state.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum state.v1.PointStateEnum
 */
export enum PointStateEnum {
  /**
   * @generated from enum value: POINT_STATE_UNKNOWN = 0;
   */
  POINT_STATE_UNKNOWN = 0,

  /**
   * ポイントがまっすぐな状態
   *
   * @generated from enum value: POINT_STATE_NORMAL = 1;
   */
  POINT_STATE_NORMAL = 1,

  /**
   * ポイントが移動している状態
   *
   * @generated from enum value: POINT_STATE_REVERSE = 2;
   */
  POINT_STATE_REVERSE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PointStateEnum)
proto3.util.setEnumType(PointStateEnum, "state.v1.PointStateEnum", [
  { no: 0, name: "POINT_STATE_UNKNOWN" },
  { no: 1, name: "POINT_STATE_NORMAL" },
  { no: 2, name: "POINT_STATE_REVERSE" },
]);

/**
 * @generated from message state.v1.PointAndState
 */
export class PointAndState extends Message<PointAndState> {
  /**
   * ポイントのid
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * ポイントの状態
   *
   * @generated from field: state.v1.PointStateEnum state = 2;
   */
  state = PointStateEnum.POINT_STATE_UNKNOWN;

  constructor(data?: PartialMessage<PointAndState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.PointAndState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(PointStateEnum) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PointAndState {
    return new PointAndState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PointAndState {
    return new PointAndState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PointAndState {
    return new PointAndState().fromJsonString(jsonString, options);
  }

  static equals(a: PointAndState | PlainMessage<PointAndState> | undefined, b: PointAndState | PlainMessage<PointAndState> | undefined): boolean {
    return proto3.util.equals(PointAndState, a, b);
  }
}

/**
 *
 * UpdatePointState : ポイントの状態を更新するAPI
 *
 * @generated from message state.v1.UpdatePointStateRequest
 */
export class UpdatePointStateRequest extends Message<UpdatePointStateRequest> {
  /**
   * @generated from field: state.v1.PointAndState state = 1;
   */
  state?: PointAndState;

  constructor(data?: PartialMessage<UpdatePointStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.UpdatePointStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: PointAndState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePointStateRequest {
    return new UpdatePointStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePointStateRequest {
    return new UpdatePointStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePointStateRequest {
    return new UpdatePointStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePointStateRequest | PlainMessage<UpdatePointStateRequest> | undefined, b: UpdatePointStateRequest | PlainMessage<UpdatePointStateRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePointStateRequest, a, b);
  }
}

/**
 * @generated from message state.v1.UpdatePointStateResponse
 */
export class UpdatePointStateResponse extends Message<UpdatePointStateResponse> {
  constructor(data?: PartialMessage<UpdatePointStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.UpdatePointStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePointStateResponse {
    return new UpdatePointStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePointStateResponse {
    return new UpdatePointStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePointStateResponse {
    return new UpdatePointStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePointStateResponse | PlainMessage<UpdatePointStateResponse> | undefined, b: UpdatePointStateResponse | PlainMessage<UpdatePointStateResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePointStateResponse, a, b);
  }
}

/**
 *
 * GetPointStates : 全てのポイントの状態を取得するAPI
 *
 * @generated from message state.v1.GetPointStatesRequest
 */
export class GetPointStatesRequest extends Message<GetPointStatesRequest> {
  constructor(data?: PartialMessage<GetPointStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.GetPointStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPointStatesRequest {
    return new GetPointStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPointStatesRequest {
    return new GetPointStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPointStatesRequest {
    return new GetPointStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPointStatesRequest | PlainMessage<GetPointStatesRequest> | undefined, b: GetPointStatesRequest | PlainMessage<GetPointStatesRequest> | undefined): boolean {
    return proto3.util.equals(GetPointStatesRequest, a, b);
  }
}

/**
 * @generated from message state.v1.GetPointStatesResponse
 */
export class GetPointStatesResponse extends Message<GetPointStatesResponse> {
  /**
   * @generated from field: repeated state.v1.PointAndState states = 1;
   */
  states: PointAndState[] = [];

  constructor(data?: PartialMessage<GetPointStatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "state.v1.GetPointStatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "states", kind: "message", T: PointAndState, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPointStatesResponse {
    return new GetPointStatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPointStatesResponse {
    return new GetPointStatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPointStatesResponse {
    return new GetPointStatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPointStatesResponse | PlainMessage<GetPointStatesResponse> | undefined, b: GetPointStatesResponse | PlainMessage<GetPointStatesResponse> | undefined): boolean {
    return proto3.util.equals(GetPointStatesResponse, a, b);
  }
}

